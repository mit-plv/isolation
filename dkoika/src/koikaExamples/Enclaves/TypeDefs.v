(* Require Import koika.Frontend. *)

(* Definition LOG_NREGS := 5. *)
(* Definition NREGS := 32. *)
(* Definition REG_SZ := 32. *)
(* Definition SCOREBOARD_MAX_SCORE := 3. *)
(* Definition LOG_SCOREBOARD_MAX_SCORE := PeanoNat.Nat.log2_up SCOREBOARD_MAX_SCORE. *)
(* Definition WRITE_STYLE := SequentialSwitchTt. *)
(* Definition READ_STYLE := OrTreeSwitch. *)

(* Definition ENUM_immType_sz := 3. *)
(* Inductive ENUM_immType_members := ENUM_immType_ImmI|ENUM_immType_ImmS|ENUM_immType_ImmB|ENUM_immType_ImmU|ENUM_immType_ImmJ. *)
(* #[export] Instance EqDec_ENUM_immType_members : EqDec ENUM_immType_members := _. *)
(* Definition ENUM_immType := [ENUM_immType_ImmI;ENUM_immType_ImmS;ENUM_immType_ImmB;ENUM_immType_ImmU;ENUM_immType_ImmJ]. *)
(* Definition ENUM_immType__ImmI := Eval compute in (Bits.of_nat 3 (T_id_nat ENUM_immType ENUM_immType_ImmI)). *)
(* Definition ENUM_immType__ImmS := Eval compute in (Bits.of_nat 3 (T_id_nat ENUM_immType ENUM_immType_ImmS)). *)
(* Definition ENUM_immType__ImmB := Eval compute in (Bits.of_nat 3 (T_id_nat ENUM_immType ENUM_immType_ImmB)). *)
(* Definition ENUM_immType__ImmU := Eval compute in (Bits.of_nat 3 (T_id_nat ENUM_immType ENUM_immType_ImmU)). *)
(* Definition ENUM_immType__ImmJ := Eval compute in (Bits.of_nat 3 (T_id_nat ENUM_immType ENUM_immType_ImmJ)). *)

(* Definition ENUM_purge_state_sz := 2. *)
(* Inductive ENUM_purge_state_members := ENUM_purge_state_INIT|ENUM_purge_state_READY|ENUM_purge_state_PURGING|ENUM_purge_state_PURGED. *)
(* #[export] Instance EqDec_ENUM_purge_state_members : EqDec ENUM_purge_state_members := _. *)
(* Definition ENUM_purge_state := [ENUM_purge_state_INIT;ENUM_purge_state_READY;ENUM_purge_state_PURGING;ENUM_purge_state_PURGED]. *)
(* Definition ENUM_purge_state__INIT := Eval compute in (Bits.of_nat 2 (T_id_nat ENUM_purge_state ENUM_purge_state_INIT)). *)
(* Definition ENUM_purge_state__READY := Eval compute in (Bits.of_nat 2 (T_id_nat ENUM_purge_state ENUM_purge_state_READY)). *)
(* Definition ENUM_purge_state__PURGING := Eval compute in (Bits.of_nat 2 (T_id_nat ENUM_purge_state ENUM_purge_state_PURGING)). *)
(* Definition ENUM_purge_state__PURGED := Eval compute in (Bits.of_nat 2 (T_id_nat ENUM_purge_state ENUM_purge_state_PURGED)). *)

(* Definition ENUM_core_state_sz := 2. *)
(* Inductive ENUM_core_state_members := ENUM_core_state_RUNNING|ENUM_core_state_PURGING|ENUM_core_state_PURGED|ENUM_core_state_WAITING. *)
(* #[export] Instance EqDec_ENUM_core_state_members : EqDec ENUM_core_state_members := _. *)
(* Definition ENUM_core_state := [ENUM_core_state_RUNNING;ENUM_core_state_PURGING;ENUM_core_state_PURGED;ENUM_core_state_WAITING]. *)
(* Definition ENUM_core_state__RUNNING := Eval compute in (Bits.of_nat 2 (T_id_nat ENUM_core_state ENUM_core_state_RUNNING)). *)
(* Definition ENUM_core_state__PURGING := Eval compute in (Bits.of_nat 2 (T_id_nat ENUM_core_state ENUM_core_state_PURGING)). *)
(* Definition ENUM_core_state__PURGED := Eval compute in (Bits.of_nat 2 (T_id_nat ENUM_core_state ENUM_core_state_PURGED)). *)
(* Definition ENUM_core_state__WAITING := Eval compute in (Bits.of_nat 2 (T_id_nat ENUM_core_state ENUM_core_state_WAITING)). *)

(* Definition S_maybe_ENUM_immType_id := _Struct "S_maybe_ENUM_immType" 0%N. *)
(* Definition S_maybe_ENUM_immType := STRUCT_maybe (S_maybe_ENUM_immType_id) (ENUM_immType_sz). *)

(* Definition decodedInst_id := _Struct "decodedInst" 1%N. *)
(* Definition FLD_decodedInst__valid_rs1 := _StructField "valid_rs1" 0%N. *)
(* Definition FLD_decodedInst__valid_rs2 := _StructField "valid_rs2" 1%N. *)
(* Definition FLD_decodedInst__valid_rd := _StructField "valid_rd" 2%N. *)
(* Definition FLD_decodedInst__legal := _StructField "legal" 3%N. *)
(* Definition FLD_decodedInst__inst := _StructField "inst" 4%N. *)
(* Definition FLD_decodedInst__immediateType := _StructField "immediateType" 5%N. *)
(* Definition decodedInst : struct_t := *)
(*   {| dstruct_name := decodedInst_id; *)
(*      dstruct_fields := [ *)
(*                         (FLD_decodedInst__valid_rs1, 1); *)
(*                         (FLD_decodedInst__valid_rs2, 1); *)
(*                         (FLD_decodedInst__valid_rd, 1); *)
(*                         (FLD_decodedInst__legal, 1); *)
(*                         (FLD_decodedInst__inst, 32); *)
(*                         (FLD_decodedInst__immediateType, struct_sz S_maybe_ENUM_immType) *)
(*                       ] *)
(*   |}. *)

(* Definition instFields_id := _Struct "instFields" 2%N. *)
(* Definition FLD_instFields__opcode := _StructField "opcode" 0%N. *)
(* Definition FLD_instFields__funct3 := _StructField "funct3" 1%N. *)
(* Definition FLD_instFields__funct7 := _StructField "funct7" 2%N. *)
(* Definition FLD_instFields__funct5 := _StructField "funct5" 3%N. *)
(* Definition FLD_instFields__funct2 := _StructField "funct2" 4%N. *)
(* Definition FLD_instFields__rd := _StructField "rd" 5%N. *)
(* Definition FLD_instFields__rs1 := _StructField "rs1" 6%N. *)
(* Definition FLD_instFields__rs2 := _StructField "rs2" 7%N. *)
(* Definition FLD_instFields__rs3 := _StructField "rs3" 8%N. *)
(* Definition FLD_instFields__immI := _StructField "immI" 9%N. *)
(* Definition FLD_instFields__immS := _StructField "immS" 10%N. *)
(* Definition FLD_instFields__immB := _StructField "immB" 11%N. *)
(* Definition FLD_instFields__immU := _StructField "immU" 12%N. *)
(* Definition FLD_instFields__immJ := _StructField "immJ" 13%N. *)
(* Definition FLD_instFields__csr := _StructField "csr" 14%N. *)
(* Definition instFields : struct_t := *)
(*   {| dstruct_name := instFields_id; *)
(*      dstruct_fields := [ *)
(*                         (FLD_instFields__opcode, 7); *)
(*                         (FLD_instFields__funct3, 3); *)
(*                         (FLD_instFields__funct7, 7); *)
(*                         (FLD_instFields__funct5, 5); *)
(*                         (FLD_instFields__funct2, 2); *)
(*                         (FLD_instFields__rd, 5); *)
(*                         (FLD_instFields__rs1, 5); *)
(*                         (FLD_instFields__rs2, 5); *)
(*                         (FLD_instFields__rs3, 5); *)
(*                         (FLD_instFields__immI, 32); *)
(*                         (FLD_instFields__immS, 32); *)
(*                         (FLD_instFields__immB, 32); *)
(*                         (FLD_instFields__immU, 32); *)
(*                         (FLD_instFields__immJ, 32); *)
(*                         (FLD_instFields__csr, 12) *)
(*                       ] *)
(*   |}. *)

(* Definition alu32_arg_t_id := _Struct "alu32_arg_t" 3%N. *)
(* Definition FLD_alu32_arg_t__funct3 := _StructField "funct3" 0%N. *)
(* Definition FLD_alu32_arg_t__funct7 := _StructField "funct7" 1%N. *)
(* Definition FLD_alu32_arg_t__a := _StructField "a" 2%N. *)
(* Definition FLD_alu32_arg_t__b := _StructField "b" 3%N. *)
(* Definition alu32_arg_t : struct_t := *)
(*   {| dstruct_name := alu32_arg_t_id; *)
(*      dstruct_fields := [ *)
(*                         (FLD_alu32_arg_t__funct3, 3); *)
(*                         (FLD_alu32_arg_t__funct7, 7); *)
(*                         (FLD_alu32_arg_t__a, 32); *)
(*                         (FLD_alu32_arg_t__b, 32) *)
(*                       ] *)
(*   |}. *)

(* Definition exec32_arg_t_id := _Struct "exec32_arg_t" 4%N. *)
(* Definition FLD_exec32_arg_t__inst := _StructField "inst" 0%N. *)
(* Definition FLD_exec32_arg_t__rs1_val := _StructField "rs1_val" 1%N. *)
(* Definition FLD_exec32_arg_t__rs2_val := _StructField "rs2_val" 2%N. *)
(* Definition FLD_exec32_arg_t__imm_val := _StructField "imm_val" 3%N. *)
(* Definition FLD_exec32_arg_t__pc := _StructField "pc" 4%N. *)
(* Definition exec32_arg_t : struct_t := *)
(*   {| dstruct_name := exec32_arg_t_id; *)
(*      dstruct_fields := [ *)
(*                         (FLD_exec32_arg_t__inst, 32); *)
(*                         (FLD_exec32_arg_t__rs1_val, 32); *)
(*                         (FLD_exec32_arg_t__rs2_val, 32); *)
(*                         (FLD_exec32_arg_t__imm_val, 32); *)
(*                         (FLD_exec32_arg_t__pc, 32) *)
(*                       ] *)
(*   |}. *)

(* Definition control_result_id := _Struct "control_result" 5%N. *)
(* Definition FLD_control_result__nextPC := _StructField "nextPC" 0%N. *)
(* Definition FLD_control_result__taken := _StructField "taken" 1%N. *)
(* Definition control_result : struct_t := *)
(*   {| dstruct_name := control_result_id; *)
(*      dstruct_fields := [ *)
(*                         (FLD_control_result__nextPC, 32); *)
(*                         (FLD_control_result__taken, 1) *)
(*                       ] *)
(*   |}. *)

(* Definition fetch_bookkeeping_id := _Struct "fetch_bookkeeping" 6%N. *)
(* Definition FLD_fetch_bookkeeping__pc := _StructField "pc" 0%N. *)
(* Definition FLD_fetch_bookkeeping__ppc := _StructField "ppc" 1%N. *)
(* Definition FLD_fetch_bookkeeping__epoch := _StructField "epoch" 2%N. *)
(* Definition fetch_bookkeeping : struct_t := *)
(*   {| dstruct_name := fetch_bookkeeping_id; *)
(*      dstruct_fields := [ *)
(*                         (FLD_fetch_bookkeeping__pc, 32); *)
(*                         (FLD_fetch_bookkeeping__ppc, 32); *)
(*                         (FLD_fetch_bookkeeping__epoch, 1) *)
(*                       ] *)
(*   |}. *)

(* Definition decode_bookkeeping_id := _Struct "decode_bookkeeping" 7%N. *)
(* Definition FLD_decode_bookkeeping__pc := _StructField "pc" 0%N. *)
(* Definition FLD_decode_bookkeeping__ppc := _StructField "ppc" 1%N. *)
(* Definition FLD_decode_bookkeeping__epoch := _StructField "epoch" 2%N. *)
(* Definition FLD_decode_bookkeeping__dInst := _StructField "dInst" 3%N. *)
(* Definition FLD_decode_bookkeeping__rval1 := _StructField "rval1" 4%N. *)
(* Definition FLD_decode_bookkeeping__rval2 := _StructField "rval2" 5%N. *)
(* Definition decode_bookkeeping : struct_t := *)
(*   {| dstruct_name := decode_bookkeeping_id; *)
(*      dstruct_fields := [ *)
(*                         (FLD_decode_bookkeeping__pc, 32); *)
(*                         (FLD_decode_bookkeeping__ppc, 32); *)
(*                         (FLD_decode_bookkeeping__epoch, 1); *)
(*                         (FLD_decode_bookkeeping__dInst, struct_sz decodedInst); *)
(*                         (FLD_decode_bookkeeping__rval1, 32); *)
(*                         (FLD_decode_bookkeeping__rval2, 32) *)
(*                       ] *)
(*   |}. *)

(* Definition execute_bookkeeping_id := _Struct "execute_bookkeeping" 8%N. *)
(* Definition FLD_execute_bookkeeping__isUnsigned := _StructField "isUnsigned" 0%N. *)
(* Definition FLD_execute_bookkeeping__size := _StructField "size" 1%N. *)
(* Definition FLD_execute_bookkeeping__offset := _StructField "offset" 2%N. *)
(* Definition FLD_execute_bookkeeping__newrd := _StructField "newrd" 3%N. *)
(* Definition FLD_execute_bookkeeping__dInst := _StructField "dInst" 4%N. *)
(* Definition FLD_execute_bookkeeping__enclaveData := _StructField "enclaveData" 5%N. *)
(* Definition FLD_execute_bookkeeping__isMMIOInstr := _StructField "isMMIOInstr" 6%N. *)
(* Definition execute_bookkeeping : struct_t := *)
(*   {| dstruct_name := execute_bookkeeping_id; *)
(*      dstruct_fields := [ *)
(*                         (FLD_execute_bookkeeping__isUnsigned, 1); *)
(*                         (FLD_execute_bookkeeping__size, 2); *)
(*                         (FLD_execute_bookkeeping__offset, 2); *)
(*                         (FLD_execute_bookkeeping__newrd, 32); *)
(*                         (FLD_execute_bookkeeping__dInst, struct_sz decodedInst); *)
(*                         (FLD_execute_bookkeeping__enclaveData, 32); *)
(*                         (FLD_execute_bookkeeping__isMMIOInstr, 1) *)
(*                       ] *)
(*   |}. *)

(* Definition S_regwrite_NREGS_id := _Struct "S_regwrite_NREGS" 9%N. *)
(* Definition S_regwrite_NREGS := STRUCT_regwrite (S_regwrite_NREGS_id) (LOG_NREGS) (REG_SZ). *)

(* Definition S_regwrite_scoreboard_id := _Struct "S_regwrite_scoreboard" 10%N. *)
(* Definition S_regwrite_scoreboard := STRUCT_regwrite (S_regwrite_scoreboard_id) (LOG_NREGS) (LOG_SCOREBOARD_MAX_SCORE). *)

(* Definition mem_req_id := _Struct "mem_req" 11%N. *)
(* Definition FLD_mem_req__byte_en := _StructField "byte_en" 0%N. *)
(* Definition FLD_mem_req__addr := _StructField "addr" 1%N. *)
(* Definition FLD_mem_req__data := _StructField "data" 2%N. *)
(* Definition mem_req : struct_t := *)
(*   {| dstruct_name := mem_req_id; *)
(*      dstruct_fields := [ *)
(*                         (FLD_mem_req__byte_en, 4); *)
(*                         (FLD_mem_req__addr, 32); *)
(*                         (FLD_mem_req__data, 32) *)
(*                       ] *)
(*   |}. *)

(* Definition mem_resp_id := _Struct "mem_resp" 12%N. *)
(* Definition FLD_mem_resp__byte_en := _StructField "byte_en" 0%N. *)
(* Definition FLD_mem_resp__addr := _StructField "addr" 1%N. *)
(* Definition FLD_mem_resp__data := _StructField "data" 2%N. *)
(* Definition mem_resp : struct_t := *)
(*   {| dstruct_name := mem_resp_id; *)
(*      dstruct_fields := [ *)
(*                         (FLD_mem_resp__byte_en, 4); *)
(*                         (FLD_mem_resp__addr, 32); *)
(*                         (FLD_mem_resp__data, 32) *)
(*                       ] *)
(*   |}. *)

(* Definition enclave_req_id := _Struct "enclave_req" 13%N. *)
(* Definition FLD_enclave_req__eid := _StructField "eid" 0%N. *)
(* Definition FLD_enclave_req__shared_regions := _StructField "shared_regions" 1%N. *)
(* Definition FLD_enclave_req__ext_uart := _StructField "ext_uart" 2%N. *)
(* Definition FLD_enclave_req__ext_led := _StructField "ext_led" 3%N. *)
(* Definition enclave_req : struct_t := *)
(*   {| dstruct_name := enclave_req_id; *)
(*      dstruct_fields := [ *)
(*                         (FLD_enclave_req__eid, 2); *)
(*                         (FLD_enclave_req__shared_regions, 6); *)
(*                         (FLD_enclave_req__ext_uart, 1); *)
(*                         (FLD_enclave_req__ext_led, 1) *)
(*                       ] *)
(*   |}. *)

(* Definition mem_input_id := _Struct "mem_input" 14%N. *)
(* Definition FLD_mem_input__put_valid := _StructField "put_valid" 0%N. *)
(* Definition FLD_mem_input__put_request := _StructField "put_request" 1%N. *)
(* Definition FLD_mem_input__get_ready := _StructField "get_ready" 2%N. *)
(* Definition mem_input : struct_t := *)
(*   {| dstruct_name := mem_input_id; *)
(*      dstruct_fields := [ *)
(*                         (FLD_mem_input__put_valid, 1); *)
(*                         (FLD_mem_input__put_request, struct_sz mem_req); *)
(*                         (FLD_mem_input__get_ready, 1) *)
(*                       ] *)
(*   |}. *)

(* Definition mem_output_id := _Struct "mem_output" 15%N. *)
(* Definition FLD_mem_output__get_valid := _StructField "get_valid" 0%N. *)
(* Definition FLD_mem_output__get_response := _StructField "get_response" 1%N. *)
(* Definition FLD_mem_output__put_ready := _StructField "put_ready" 2%N. *)

(* Definition mem_output : struct_t := *)
(*   {| dstruct_name := mem_output_id; *)
(*      dstruct_fields := [ *)
(*                         (FLD_mem_output__get_valid, 1); *)
(*                         (FLD_mem_output__get_response, struct_sz mem_resp); *)
(*                         (FLD_mem_output__put_ready, 1) *)
(*                       ] *)
(*   |}. *)

(* Definition shreq_id := _Struct "shreq" 16%N. *)
(* Definition FLD_shreq__req := _StructField "req" 0%N. *)
(* Definition FLD_shreq__sourceType := _StructField "sourceType" 1%N. *)
(* Definition FLD_shreq__sourceCore := _StructField "sourceCore" 2%N. *)
(* Definition FLD_shreq__valid := _StructField "valid" 3%N. *)
(* Definition shreq : struct_t := *)
(*   {| dstruct_name := shreq_id; *)
(*      dstruct_fields := [ *)
(*                         (FLD_shreq__req, struct_sz mem_req); *)
(*                         (FLD_shreq__sourceType, 1); *)
(*                         (FLD_shreq__sourceCore, 1); *)
(*                         (FLD_shreq__valid, 1) *)
(*                       ] *)
(*   |}. *)

(* Definition shresp_id := _Struct "shresp" 17%N. *)
(* Definition FLD_shresp__resp := _StructField "resp" 0%N. *)
(* Definition FLD_shresp__sourceType := _StructField "sourceType" 1%N. *)
(* Definition FLD_shresp__sourceCore := _StructField "sourceCore" 2%N. *)
(* Definition FLD_shresp__valid := _StructField "valid" 3%N. *)
(* Definition shresp : struct_t := *)
(*   {| dstruct_name := shresp_id; *)
(*      dstruct_fields := [ *)
(*                         (FLD_shresp__resp, struct_sz mem_resp); *)
(*                         (FLD_shresp__sourceType, 1); *)
(*                         (FLD_shresp__sourceCore, 1); *)
(*                         (FLD_shresp__valid, 1) *)
(*                       ] *)
(*   |}. *)

(* Definition enclave_data_id := _Struct "enclave_data" 18%N. *)
(* Definition FLD_enclave_data__data := _StructField "data" 0%N. *)
(* Definition FLD_enclave_data__valid := _StructField "valid" 1%N. *)
(* Definition enclave_data : struct_t := *)
(*   {| dstruct_name := enclave_data_id; *)
(*      dstruct_fields := [ *)
(*                         (FLD_enclave_data__data, struct_sz enclave_req); *)
(*                         (FLD_enclave_data__valid, 1) *)
(*                       ] *)
(*   |}. *)

(* Definition enclave_data_and_addr_id := _Struct "enclave_data_and_addr" 19%N. *)
(* Definition FLD_enclave_data_and_addr__data := _StructField "data" 0%N. *)
(* Definition FLD_enclave_data_and_addr__addr := _StructField "addr" 1%N. *)
(* Definition enclave_data_and_addr : struct_t := *)
(*   {| dstruct_name := enclave_data_and_addr_id; *)
(*      dstruct_fields := [ *)
(*                         (FLD_enclave_data_and_addr__data, struct_sz enclave_req); *)
(*                         (FLD_enclave_data_and_addr__addr, 32) *)
(*                       ] *)
(*   |}. *)

(* Definition S_maybe_bits_8_id := _Struct "S_maybe_bits_8" 20%N. *)
(* Definition S_maybe_bits_8 := STRUCT_maybe (S_maybe_bits_8_id) (8). *)

(* Definition S_maybe_bits_1_id := _Struct "S_maybe_bits_1" 21%N. *)
(* Definition S_maybe_bits_1 := STRUCT_maybe (S_maybe_bits_1_id) (1). *)
(* Definition EXTFN_ext_mem_get_response := _ExtFn "ext_mem_get_response" 0%N. *)
(* Definition EXTFN_ext_mem_push_request := _ExtFn "ext_mem_push_request" 1%N. *)
(* Definition EXTFN_ext_uart_write := _ExtFn "ext_uart_write" 2%N. *)
(* Definition EXTFN_ext_uart_read := _ExtFn "ext_uart_read" 3%N. *)
(* Definition EXTFN_ext_led := _ExtFn "ext_led" 4%N. *)
(* Definition ext_fn_types_list: list (ext_fn_t * (nat * nat)) := [ *)
(*   (EXTFN_ext_mem_get_response, (1,struct_sz mem_output)) *)
(*   ;  (EXTFN_ext_mem_push_request, (struct_sz mem_input,1)) *)
(*   ;  (EXTFN_ext_uart_write, (struct_sz S_maybe_bits_8,1)) *)
(*   ;  (EXTFN_ext_uart_read, (1,struct_sz S_maybe_bits_8)) *)
(*   ;  (EXTFN_ext_led, (struct_sz S_maybe_bits_1,1)) *)
(*   ]. *)
(* Definition ext_fn_tys : ext_fn_types_t := ext_fn_types_list. *)
